name: Build and Test with Docker Compose

on:
  push:
    paths-ignore:
    - 'cypress/e2e/cypress/screenshots/spec.cy.js/**'
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: Canada
          MYSQL_DATABASE: mibase1
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

# Paso 1: Instalar Docker usando el repositorio oficial (sin versiones específicas)
    - name: Set up Docker
      run: |
        sudo apt-get update  
        sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io
        sudo systemctl start docker
        sudo systemctl enable docker
        
    # Paso 2: Instalar Docker Compose
    - name: Install Docker Compose
      run: |
       sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
       sudo chmod +x /usr/local/bin/docker-compose
       sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose  # Enlaza docker-compose si es necesario
       docker-compose --version  # Verifica la instalación

    # Paso 1: Instalar JDK 11 (usando la distribución Adoptium)
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'zulu'  # Usar adoptium en lugar de adoptopenjdk

    # Paso 2: Instalar Node.js (para el frontend)
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'  # Ajusta según tu versión de Node.js

    - name: Set Java Options for Maven
      run: |
        echo "JAVA_HOME=${{ steps.setup-java.outputs.java-home }}" >> $GITHUB_ENV
        echo "MAVEN_OPTS=-Dmaven.compiler.source=11 -Dmaven.compiler.target=11" >> $GITHUB_ENV
        
    # Paso 3: Instalar dependencias del backend (mvn clean install)
    - name: Build backend with Maven
      run: |
        cd backend
        mvn clean install
        mvn clean package
        cd ..

    # Paso 4: Instalar dependencias y construir el frontend
    - name: Build frontend
      run: |
        cd frontend
        export NODE_OPTIONS=--openssl-legacy-provider
        npm install
        npm run build
        cd ..

    # Paso 5: Instalar Angular CLI globalmente
    - name: Install Angular CLI
      run: |
        npm install -g @angular/cli

    # Paso 6: Construir contenedores con Docker Compose
    - name: Build and run Docker Compose
      run: |
        docker-compose -f docker-compose.yml up --build -d

    # Paso 7: Esperar a que la aplicación se inicie
    - name: Wait for the application to be ready
      run: |
        sleep 30  # Espera para asegurar que los contenedores estén listos

    # Paso 11: Ejecutar Cypress en modo headless sin TTY
    - name: Run Cypress Tests
      run: |
        docker-compose -f docker-compose.yml exec -T cypress npx cypress run --headless
    
    # Paso 9: Detener y eliminar contenedores
    - name: Stop and remove containers
      run: |
        docker-compose -f docker-compose.yml down
